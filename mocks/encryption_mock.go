// Code generated by MockGen. DO NOT EDIT.
// Source: room-one/proto (interfaces: EncryptionServiceClient)

// Package mock_proto is a generated GoMock package.
package mock_proto

import (
	context "context"
	reflect "reflect"
	proto "room-one/proto"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockEncryptionServiceClient is a mock of EncryptionServiceClient interface
type MockEncryptionServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockEncryptionServiceClientMockRecorder
}

// MockEncryptionServiceClientMockRecorder is the mock recorder for MockEncryptionServiceClient
type MockEncryptionServiceClientMockRecorder struct {
	mock *MockEncryptionServiceClient
}

// NewMockEncryptionServiceClient creates a new mock instance
func NewMockEncryptionServiceClient(ctrl *gomock.Controller) *MockEncryptionServiceClient {
	mock := &MockEncryptionServiceClient{ctrl: ctrl}
	mock.recorder = &MockEncryptionServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEncryptionServiceClient) EXPECT() *MockEncryptionServiceClientMockRecorder {
	return m.recorder
}

// Encrypt mocks base method
func (m *MockEncryptionServiceClient) Encrypt(arg0 context.Context, arg1 *proto.RequestText, arg2 ...grpc.CallOption) (*proto.EncryptedText, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Encrypt", varargs...)
	ret0, _ := ret[0].(*proto.EncryptedText)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Encrypt indicates an expected call of Encrypt
func (mr *MockEncryptionServiceClientMockRecorder) Encrypt(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Encrypt", reflect.TypeOf((*MockEncryptionServiceClient)(nil).Encrypt), varargs...)
}

// Reverse mocks base method
func (m *MockEncryptionServiceClient) Reverse(arg0 context.Context, arg1 *proto.InputString, arg2 ...grpc.CallOption) (*proto.ReveresedString, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Reverse", varargs...)
	ret0, _ := ret[0].(*proto.ReveresedString)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Reverse indicates an expected call of Reverse
func (mr *MockEncryptionServiceClientMockRecorder) Reverse(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reverse", reflect.TypeOf((*MockEncryptionServiceClient)(nil).Reverse), varargs...)
}
